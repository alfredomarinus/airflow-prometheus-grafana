x-airflow-common-env: &airflow-common-env
  AIRFLOW__CORE__EXECUTOR: CeleryExecutor
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
  AIRFLOW__CORE__CELERY_BROKER_URL: redis://redis:6379/0
  AIRFLOW__CORE__CELERY_RESULT_BACKEND: redis://redis:6379/0
  AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
  AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
  PYTHONPATH: /opt/airflow/scripts:/opt/airflow/dags
  RATELIMIT_STORAGE_URL: redis://redis:6379
  AIRFLOW__METRICS__STATSD_ON: "False"
  AIRFLOW__METRICS__STATSD_HOST: statsd-exporter
  AIRFLOW__METRICS__STATSD_PORT: "9125"
  AIRFLOW__METRICS__STATSD_PREFIX: airflow
  # Updated for Airflow 3 - FAB Auth Manager (using providers package)
  AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
  # API Server configuration for FAB auth backends
  AIRFLOW__FAB__AUTH_BACKENDS: airflow.providers.fab.auth_manager.api.auth.backend.basic_auth

x-airflow-common-volumes: &airflow-common-volumes
  - ./airflow/logs:/opt/airflow/logs
  - ./airflow/dags:/opt/airflow/dags
  - ./airflow/plugins:/opt/airflow/plugins
  - ./airflow/scripts:/opt/airflow/scripts

services:
  # Database initialization service
  airflow-init:
    container_name: airflow-init
    environment:
      *airflow-common-env
    volumes:
      *airflow-common-volumes
    command:
      - bash
      - -c
      - |
        airflow db migrate
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || true
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Main API Server (replaces webserver)
  airflow-api-server:
    container_name: airflow-api-server
    ports:
      - "8080:8080"  # Main UI port
      - "8081:8081"  # API port
    environment:
      <<: *airflow-common-env
      # API Server specific configs
      AIRFLOW__API__ENABLE_EXPERIMENTAL_API: "true"
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
    volumes:
      *airflow-common-volumes
    command: airflow api-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  airflow-scheduler:
    container_name: airflow-scheduler
    environment:
      *airflow-common-env
    volumes:
      *airflow-common-volumes
    command: airflow scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $(hostname)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  airflow-worker:
    container_name: airflow-worker
    environment:
      *airflow-common-env
    volumes:
      *airflow-common-volumes
    command: celery worker
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  airflow-triggerer:
    container_name: airflow-triggerer
    environment:
      *airflow-common-env
    volumes:
      *airflow-common-volumes
    command: airflow triggerer
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  postgres:
    image: postgres:14.12
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - data-stack

  flower:
    image: mher/flower:2.0.1
    container_name: flower
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_PORT=5555
      - FLOWER_BASIC_AUTH=${FLOWER_USERNAME}:${FLOWER_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://${FLOWER_USERNAME}:${FLOWER_PASSWORD}@127.0.0.1:5555 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - data-stack

  redis:
    image: redis:7.2.5-alpine3.19
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - data-stack

  prometheus:
    image: prom/prometheus:v3.4.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - data-stack

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - data-stack

  minio:
    image: quay.io/minio/minio:RELEASE.2025-05-24T17-08-30Z
    container_name: minio
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "9002:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9001/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - data-stack
  
  statsd-exporter:
    image: prom/statsd-exporter:v0.26.0
    container_name: statsd-exporter
    ports:
      - "9102:9102"
    volumes:
      - ./prometheus/airflow_statsd_mapping.yml:/etc/statsd/exporter.yml:ro
    command:
      - --statsd.mapping-config=/etc/statsd/exporter.yml
      - --web.listen-address=:9102
      - --statsd.listen-udp=:9125
    networks:
      - data-stack

volumes:
  postgres-db-volume:
  redis-data:
  minio-data:
  grafana-storage:

networks:
  data-stack:
    driver: bridge
    name: data-stack